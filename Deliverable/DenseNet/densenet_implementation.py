# -*- coding: utf-8 -*-
"""DenseNet_Implementation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9O8tY3EOx24ejTHKKBkQFwF3NoUMlxN
"""

from google.colab import drive
drive.mount('/content/drive')
!ls

!cp /content/drive/MyDrive/densenet.py /content

from densenet import *
import os

import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, BatchNormalization, Dense
from tensorflow.keras.layers import AvgPool2D, GlobalAveragePooling2D, MaxPool2D
from tensorflow.keras.models import Model
from tensorflow.keras.models import load_model
from tensorflow.keras.layers import ReLU, concatenate
import tensorflow.keras.backend as K
from tensorflow.keras.optimizers import Adam

from sklearn.model_selection import train_test_split

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

filepath = "/content/drive/MyDrive/Selected X_rays"
list_of_images = os.listdir(filepath)

labels = pd.read_csv("/content/drive/MyDrive/new_labels.csv",
                     index_col=(0))
columns = labels.columns

unique_labels = len(labels.columns)

images = []
used_labels = []
a = 0
for files in list_of_images:
    try:
        
        image = plt.imread(filepath + "/" + files)
        image.shape[2]
        print("ignoring image " + str(a))
        a +=1
    except IndexError:
        images.append(image)
        used_labels.append(list_of_images[a])
        a += 1

test_labels = pd.DataFrame(index = used_labels, columns = columns)
for i in used_labels:
    test_labels.loc[used_labels] = labels.loc[used_labels]

test_labels = test_labels.astype(str).astype(int)

test_images = np.array(images)
test_images = np.expand_dims(test_images, axis=3)

test_labels = test_labels.values

X_train, X_test, y_train, y_test = train_test_split(test_images,test_labels,
                                                    test_size=0.2,
                                                    random_state=16)

input_shape = test_images[0].shape
n_classes = unique_labels
model = densenet(input_shape, n_classes)

print(input_shape)

model.summary()

opt = Adam(learning_rate = 0.001)

model.compile(optimizer = opt,
              loss = "BinaryCrossentropy",
              metrics=["acc"])

history = model.fit(X_train, y_train,
                    validation_data = (X_test, y_test),
                    batch_size = 4, 
                    epochs = 30)

test_loss = history.history['loss']
test_val_loss = history.history['val_loss']


plt.figure()
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.figure()
plt.plot(test_loss)
plt.plot(test_val_loss)
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model.save('/content/drive/MyDrive/dense_model.h5')

from sklearn.metrics import roc_curve

column_names = labels.columns


Y_pred= model.predict(X_test, batch_size=4)
y = y_test
y_true = y.ravel()
y_pred = Y_pred.ravel()


false_pos, true_pos, thresh = roc_curve(y_true, y_pred)

plt.figure(figsize = (5,5))
plt.plot([0, 1], [0, 1],  linestyle="--")
plt.plot(false_pos, true_pos)
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.show()

y_true_2 = pd.DataFrame(y, columns = column_names)
y_pred_2 = pd.DataFrame(Y_pred, columns = column_names)


for i in column_names:
    print(i)
    false_pos, true_pos, thresh = roc_curve(y_true_2[i], y_pred_2[i])
    globals()["{}". format(i)] = (false_pos, true_pos) 


plt.figure(figsize = (10,10))
plt.plot([0, 1], [0, 1],  linestyle="--")

for i in column_names:
    a = globals()["{}". format(i)]   
    plt.plot(a[0], a[1], label = i)

plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.legend(loc = "lower center", 
           bbox_to_anchor = (0.5, -0.2), 
           ncol=5)
plt.show()

